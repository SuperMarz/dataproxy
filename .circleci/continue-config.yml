# Copyright 2024 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: 2.1

parameters:
  sdk-build-and-run:
    type: boolean
    default: false

commands:
  sdk_build_and_test:
    parameters:
      bazel_targets:
        type: string
        default: "//dataproxy_sdk/..."
    steps:
      # Kill the whole ci after 1hr
      - run:
          name: Cancel build after set time
          background: true
          command: |
            sleep 3600
            echo "Canceling workflow as too much time has elapsed"
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${BUILD_TIMER_TOKEN}"
      - run:
          name: Checkout devtools
          command: git clone https://github.com/secretflow/devtools.git ../devtools
      - run:
          name: Setup GCS
          command: |
            echo ${gcs_content} > ../gcs.data
            ln -s dataproxy_sdk/.bazelrc .bazelrc
            ../devtools/bazel_cache_setup.py --in_file=../gcs.data --out_file=../gcs.json --min_download
      - run:
          name: "test"
          command: |
            set +e
            declare -i test_status
            make sdk_test

            mkdir -p test-results
            for dir in $(find dataproxy_sdk -type l -name bazel-testlogs); do
              for path in $(find $dir/ -name "test.xml"); do
                dir_name=$(dirname ${path})
                file_name=$(basename ${path})
                path_md5=$(echo ${path} | md5sum | cut -f1 -d ' ')
                target="test-results/TEST-${path_md5}.xml"
                echo "mv $path to ${target} ..."
                mv ${path} ${target}
              done
            done
            tar -zcvf test-results.tar.gz test-results

            exit ${test_status}
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results.tar.gz

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  sdk_linux_ut:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: secretflow/ubuntu-base-ci:latest
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    shell: /bin/bash --login -eo pipefail
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - sdk_build_and_test

  sdk_macOS_ut:
    macos:
      xcode: 15.1.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: brew install bazelisk cmake ninja libomp wget go md5sha1sum
      - sdk_build_and_test

workflows:
  unittest:
    when: << pipeline.parameters.sdk-build-and-run >>
    jobs:
      - sdk_linux_ut:
          matrix:
            parameters:
              resource_class: ["xlarge", "arm.xlarge"]
      - sdk_macOS_ut
